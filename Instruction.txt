Concurrent Linux Processes and shared memory
Purpose
The goal of this homework is to become familiar with concurrent processing in Linux using shared memory. 
You will use multiple concurrent processes to write into a file at random times, solving the concurrency issues using the Bakery algorithm for synchronization of processes. 
Your job is to create the environment such that two processes cannot write into the file simultaneously and yet, every process gets its turn to write into the file.

Task
Generate twenty processes using a master program, called master, and make them write into a file called cstest in their current working directory. 
Needless to say that all processes will use the same working directory. 
Each child process will be executed by an executable called slave. 

The message to be written into the file is:
	HH:MM:SS Queue nn File modified by process number xx

	where HH:MM:SS is the current system time, nn is the number the process picked when it entered its intention to write into the file, xx is the process number as specified by the master program. 
	The value of xx is between 1 and 20. 
	This implies that the child process will be run by the command slave xx

The critical resource is the file cstest which should be updated by a child under exclusive control access. 
This implies that each slave will have a critical section that will control access to the file to write into it.

The main program master:
Write master that runs up to n slave processes at a time. Make sure that n never exceeds 20. 
Start master by typing the following command:
		master -t ss n
			where ss is the maximum time in seconds (default 100 seconds) after which the process should terminate itself if not completed.

Implement master as follows:
1. Check for the command line argument and output a usage message if the argument is not appropriate. 
	If n is more than 20, issue a warning and limit n to 20. 
	It will be a good idea to #define the maximum value of n or keep it as a configurable.

2. Allocate shared memory and initialize it appropriately.

3. Execute the slave processes and wait for all of them to terminate.

4. Start a timer for specified number of seconds (default: 100). 
	If all children have not terminated by then, terminate the children.

5. Deallocate shared memory and terminate.

The Application Program (slave)
The slave just writes the message into the file inside the critical section. 
We want to have some log messages to see that the process is behaving appropriately and it does follow the guidance required for critical section.
If a process starts to execute code to enter the critical section, it must print a message to that effect in its log file.
I’ll suggest naming the log file as logfile.xx where xx is the process number for the child, passed via the command line. 
It will be a good idea to include the time when that happens. 
Also, indicate the time in log file when the process actually enters and exits the critical section. 
Within the critical section, wait for a random number of seconds (in the range [1,5]) before you write into the file, and then, wait for another [1,5] seconds before leaving the critical section.
For each child process, tweak the code so that the process requests and enters the critical section at most five times.
The code for each child process should use the following template:
for ( i = 0; i < 5; i++ )
{
	execute code to enter critical section;
	sleep for random amount of time (between 0 and 5 seconds);
	critical_section();
	sleep for random amount of time (between 0 and 5 seconds);
	execute code to exit from critical section;
}
The bakery algorithm requires you to specify the number of processes in the system. 
I’ll suggest specifying it as a constant macro (use #define) in a header file called config.h. 
Please keep this number under 20. 
This is the maximum number of processes that can be forked. 
The number of processes actually forked will come from the number specified on command line when you start the program.

Implementation
You will be required to create the specified number of separate slave processes from your master. 
That is, the master will just spawn the child processes and wait for them to finish. 
The master process also sets a timer at the start of computation to specified number of seconds. 
If computation has not finished by this time, the master kills all the slave processes and then exits. 
Make sure that you print appropriate message(s).
master will also allocate shared memory for synchronization purposes (choosing and number). It will open and close a logfile but will not open cstest. 
cstest will be open by the child process as it enters critical section (before the sleep) and closed as it exits.
In addition, master should also print a message when an interrupt signal (^C) is received. 
The child processes just ignore the interrupt signals (no messages on screen). 
Make sure that the processes handle multiple interrupts correctly. As a precaution, add this feature only after your program is well debugged.
The code for master and slave processes should be compiled separately and the executables be called master and slave.
Other points to remember: You are required to use fork, exec (or one of its variants), wait, and exit to manage
multiple processes. Use shmctl suite of calls for shared memory allocation. Make sure that you never have more
than 20 processes in the system at any time, even if I specify a larger number in the command line (issue a warning
in such a case).
Invoking the solution
master should be invoked using the following command:
master -t ss n
Concurrent Linux Processes and shared memory 3
Termination Criteria: There are several termination criteria. First, if all the slaves have finished, master should
deallocate shared memory and terminate.
In addition, I expect your program to terminate after the specified amount of time as specified in config.h. This
can be done using a timeout signal, at which point it should kill all currently running child processes and terminate.
It should also catch the ctrl-c signal, free up shared memory and then terminate all children. No matter how it
terminates, master should also output the time of termination to the log file. For an example of a periodic timer
interrupt, you can look at p318 in the text, in the program periodicasterisk.c.
Suggested implementation steps
I suggest you implement these requirements in the following order:
1. Create a Makefile that compiles the two source files. [Day 1]
2. Have your master read in the command line arguments, validate the arguments, and set up shared memory.
Also set up the function to deallocate shared memory. Use the command ipcs to make sure that the shared
memory is allocated and deallocated correctly. [Day 2]
3. Get master to fork and exec one child and have that child attach to shared memory and read the memory.
[Day 3]
4. Implement slave and test it as an independent process. [Day 4]
5. Put in the signal handling to terminate after specified number of seconds. A good idea to test this is to simply
have the child go into an infinite loop so master will not ever terminate normally. Once this is working have it
catch Ctrl-c and free up the shared memory, send a kill signal to the child and then terminate itself. [Day 5]
6. Set up the code to fork multiple child processes until the specific limits in the loop. Make sure everything
works correctly. [Day 6]
7. Make each child process writes itws own log file as well as cstest. [Day 7]
8. Implement bakery algorithm and handle critical section appropriately. [Day 8-10]
9. Test the integrated solution. [Day 11-12]
If you do it in this order, incrementally, you help make sure that the basic fundamentals are working before getting
to the point of launching many processes.
Make sure you never have more than 20 processes in the system at any time, even if the program is invoked with n
being more than 20. This is a hard limit.
Hints
You will need to set up shared memory in this project to allow the processes to communicate with each other. Please
check the man pages for shmget, shmctl, shmat, and shmdt to work with shared memory.
You will also need to set up signal processing and to do that, you will check on the functions for signal and abort.
If you abort a process, make sure that the parent cleans up any allocated shared memory before dying.
In case you face problems, please use the shell command ipcs to find out any shared memory allocated to you and
free it by using ipcrm.
Please make any error messages meaningful. The format for error messages should be:
master: Error: Detailed error message
where master is actually the name of the executable (argv[0]) that you are trying to execute. These error messages
may be sent to stderr using perror. Make judicious use of perror with all the system calls; it will help you debug
quickly in case of trouble
Concurrent Linux Processes and shared memory 4
Criteria for success
I have tried to give you detailed steps. There is not much room for change. Make sure that you follow good
programming practices including proper indentation, documentation, and Makefile with suffix rules. The log file
should be appropriately generated. You must clean up after yourself. That is, after the program terminates, whether
normally or by force, there should be no shared memory left that is allocated to you.
Grading
1. Overall submission: 25 pts. Program compiles and upon reading, seems to be able to solve the assigned problem
in the specified manner (shared memory/fork/exec).
2. README: 5 pts. Must address any special things you did, or if you missed anything.
3. Makefile: 5pts. Must use suffix rules or pattern rules. You’ll receive only 2 points for Makefile without those
rules.
4. Command line parsing: 5 pts. Program is able to parse the command line appropriately, assigning defaults as
needed; issues help if needed. The configuration file should be properly defined, with the comments.
5. Use of perror: 5pts. Program outputs appropriate error messages, making use of perror(3). Errors follw the
specified format.
6. Code readability: 10 pts. The code must be readable, with appropriate comments. Author and date should be
identified.
7. Proper fork/exec/wait: 15 pts. Code appropriately performs the fork/exec/wait functions. There are no zombie
processes. The number of processes is limited as specified in command line options.
8. Shared memory: 10 pts. Shared memory is properly allocated/deallocated and used to synchronize testsim
processes.
9. Signals: 10 pts. Code reacts to signals as specified. When the parent is terminated, all children are terminated
as well, and shared memory deallocated.
10. Conformance to specifications: 10pts. Code properly creates the log file; the log file has messages in appropriate
format; and appropriate messages are displayed to screen.
Submission
Handin an electronic copy of all the sources, README, Makefile(s), and results. Create your programs in a directory
called username.2 where username is your login name on opsys. Once you are done with everything, remove the
executables and object files as well as log files, and issue the following commands:
% cd
% chmod 755 ~
% ~sanjiv/bin/handin cs4760 2
% chmod 700 ~
Make sure that there is no shared memory left after your process finishes (normal or interrupted termination). Also,
use relative path to execute the child.
You do not have to hand in a hard copy of the project. Assignment is due by 11:59pm on the due date.